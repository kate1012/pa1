Our program tokenizes a string by a set of tokens, both input at the command line. It separates these into separate tokens, each printed on a separate line. It also converts any escape characters that aren't tokens into its hex form. To convert these escape characters, we used a byte map to convert a nibble into a hex character. We made a struct called escape_sequence which is used for recognizing sequences in a string, and made an array of these escape_sequence structs to convert the escape characters to be recognized as one character.  Then we have a function to parse these escape characters into their sequence equivalents, so '\' and 'n' will become '\n'. This function also recognizes if a backslash is followed by a non-escape character, in which case it truncates the backslash We then made a function to find an escape character within the string, and returns a pointer to that index. The program uses a function to find the next token, given a tokenizer_t, and returns it, by iterating through the string, and finding indices of a delimiter character. When it finds the delimiter index, it allocates space for the token, and copies over memory from the beginning of the index to the separator index. 
